Define full point to point network

App->Device
App->Devices
App->AWS
Device->App
Device->Apps
Device->AWS
AWS->App
AWS->Device

All Devices listen on to/things
All Apps listen on to/apps
Each entity listens on to/{client_id}
AWS Lambda Rule called by apps and devices
    Lambda executed on to/aws (just include lambda=true to save on rules)
AWS Lambda Rule called on device disconnects

To cc AWS on interdevice/app messages, add lambda=true to payload

App->Device
UpdateDeviceInfo
UpdateDeviceState
    Need handle method for IotDevice class
        This will check timer to persist state changes and send over mqtt.
            If timer expired, persist to disk and set syncState flag.
        This will check if update needs to be sent to pic chip.
            If state updated and not pending command, then send command.
    On command receipt, update data model, set update flag, and reset persist timer.
AddSchedule
DeleteSchedule

App->Devices
GetDevices

App->AWS
GetDevices
CreateDevice
CreateApp (Only called through api gateway)
DeleteDevice
DeleteApp

Device->App
Query (Only in response)
UpdateDeviceInfo (Only in error response)
UpdateDeviceState (Only in error response)
AddSchedule (Only in error response)
DeleteSchedule (Only in error response)

Device->Apps
Connected
UpdateDeviceState
UpdateDeviceInfo (Only in response)
AddSchedule (Only in response)
DeleteSchedule (Only in response)

Device->AWS
UpdateDeviceInfo
Heartbeat

AWS->App
GetDevices (Only in response)
CreateDevice (Only in response)
CreateApp (Only in response)
DeleteDevice (Only in response)
DeleteApp (Only in response)


AWS Lambda Design
On connect/heartbeat/disconnect -> Update last seen date/time
On update -> Update full device info
On get -> Send all device infos

DynamoDB - Store Minimal JSON instead of expanding
    ci is primary key


Scheduler Design
Cases to handle:
1. Time skips forward while running (this could be DST, TZ change, or time adjustment).
    Need most recent schedule to run.
    Need to set all missed one off schedules to inactive state.
2. Time lags backward while running (save causes as above).
    Handled automatically.  Recurring schedules will re-run, one off schedules will not re-run.
3. Missed schedules while powered off.
    Need most recent schedule to run.
    Need to set all missed one off schedules to inactive state.

Scheduler handler function.
